/*
 * Copyright (c) 2023 - 2025 Rachit
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#version 460

#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_buffer_reference2    : enable
#extension GL_EXT_scalar_block_layout  : enable

#include "Math.glsl"
#include "Constants.glsl"
#include "MegaSet.glsl"
#include "AO/VBGTAO/DepthPreFilter.h"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

shared float g_ScratchDepths[8][8];

float WeightedAverageDepthFilter(float depth0, float depth1, float depth2, float depth3);

void main()
{
    uvec2 lID = gl_LocalInvocationID.xy;

    ivec2 baseCoord   = ivec2(gl_GlobalInvocationID.xy);
    ivec2 pixelCoord  = 2 * baseCoord;
    
    vec2 viewportSize = vec2(textureSize(sampler2D(Textures[Constants.SceneDepthIndex], Samplers[Constants.PointSamplerIndex]), 0));
    vec2 depthUV      = vec2(pixelCoord) / viewportSize;

    // Mip 0
    vec4 depths = textureGatherOffset(sampler2D(Textures[Constants.SceneDepthIndex], Samplers[Constants.PointSamplerIndex]), depthUV, ivec2(1, 1));

    imageStore(Images[Constants.OutDepthMip0Index], pixelCoord + ivec2(0, 0), vec4(depths.w, 0.0f, 0.0f, 0.0f));
    imageStore(Images[Constants.OutDepthMip0Index], pixelCoord + ivec2(1, 0), vec4(depths.z, 0.0f, 0.0f, 0.0f));
    imageStore(Images[Constants.OutDepthMip0Index], pixelCoord + ivec2(0, 1), vec4(depths.x, 0.0f, 0.0f, 0.0f));
    imageStore(Images[Constants.OutDepthMip0Index], pixelCoord + ivec2(1, 1), vec4(depths.y, 0.0f, 0.0f, 0.0f));

    // Mip 1
    float depthMip1 = WeightedAverageDepthFilter(depths.w, depths.z, depths.x, depths.y);

    imageStore(Images[Constants.OutDepthMip1Index], baseCoord, vec4(depthMip1, 0.0f, 0.0f, 0.0f));

    g_ScratchDepths[lID.x][lID.y] = depthMip1;

    memoryBarrierShared();
    barrier();

    // Mip 2
    if (all(equal(lID % uvec2(2), uvec2(0))))
    {
        float inTopLeft     = g_ScratchDepths[lID.x + 0][lID.y + 0];
        float inTopRight    = g_ScratchDepths[lID.x + 1][lID.y + 0];
        float inBottomLeft  = g_ScratchDepths[lID.x + 0][lID.y + 1];
        float inBottomRight = g_ScratchDepths[lID.x + 1][lID.y + 1];

        float depthMip2 = WeightedAverageDepthFilter(inTopLeft, inTopRight, inBottomLeft, inBottomRight);

        imageStore(Images[Constants.OutDepthMip2Index], baseCoord / 2, vec4(depthMip2, 0.0f, 0.0f, 0.0f));

        g_ScratchDepths[lID.x][lID.y] = depthMip2;
    }

    memoryBarrierShared();
    barrier();

    // Mip 3
    if (all(equal(lID % uvec2(4), uvec2(0))))
    {
        float inTopLeft     = g_ScratchDepths[lID.x + 0][lID.y + 0];
        float inTopRight    = g_ScratchDepths[lID.x + 2][lID.y + 0];
        float inBottomLeft  = g_ScratchDepths[lID.x + 0][lID.y + 2];
        float inBottomRight = g_ScratchDepths[lID.x + 2][lID.y + 2];

        float depthMip3 = WeightedAverageDepthFilter(inTopLeft, inTopRight, inBottomLeft, inBottomRight);

        imageStore(Images[Constants.OutDepthMip3Index], baseCoord / 4, vec4(depthMip3, 0.0f, 0.0f, 0.0f));

        g_ScratchDepths[lID.x][lID.y] = depthMip3;
    }

    memoryBarrierShared();
    barrier();

    // Mip 4
    if (all(equal(lID % uvec2(8), uvec2(0))))
    {
        float inTopLeft     = g_ScratchDepths[lID.x + 0][lID.y + 0];
        float inTopRight    = g_ScratchDepths[lID.x + 4][lID.y + 0];
        float inBottomLeft  = g_ScratchDepths[lID.x + 0][lID.y + 4];
        float inBottomRight = g_ScratchDepths[lID.x + 4][lID.y + 4];

        float depthMip4 = WeightedAverageDepthFilter(inTopLeft, inTopRight, inBottomLeft, inBottomRight);

        imageStore(Images[Constants.OutDepthMip4Index], baseCoord / 8, vec4(depthMip4, 0.0f, 0.0f, 0.0f));
    }
}

float WeightedAverageDepthFilter(float depth0, float depth1, float depth2, float depth3)
{
    float minDepth = min(min(depth0, depth1), min(depth2, depth3));

    float weight0 = saturate((depth0 - minDepth) * GTAO_FALLOFF_MUL + GTAO_FALLOFF_ADD);
    float weight1 = saturate((depth1 - minDepth) * GTAO_FALLOFF_MUL + GTAO_FALLOFF_ADD);
    float weight2 = saturate((depth2 - minDepth) * GTAO_FALLOFF_MUL + GTAO_FALLOFF_ADD);
    float weight3 = saturate((depth3 - minDepth) * GTAO_FALLOFF_MUL + GTAO_FALLOFF_ADD);

    float weightSum = weight0 + weight1 + weight2 + weight3;

    return ((weight0 * depth0) + (weight1 * depth1) + (weight2 * depth2) + (weight3 * depth3)) / weightSum;
}