/*
 * Copyright (c) 2023 - 2025 Rachit
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#version 460

#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_buffer_reference2    : enable
#extension GL_EXT_scalar_block_layout  : enable
#extension GL_EXT_debug_printf         : enable

#include "Constants.glsl"
#include "Culling/Frustum.h"

layout(local_size_x = 64) in;

bool IsVisible(Mesh mesh, Instance instance);

void main()
{
    uint index = gl_GlobalInvocationID.x;

    if (index >= Constants.Instances.count)
    {
        return;
    }

    if (index == 0)
    {
        Constants.CulledOpaqueDrawCalls.count                 = 0;
        Constants.CulledOpaqueDoubleSidedDrawCalls.count      = 0;
        Constants.CulledAlphaMaskedDrawCalls.count            = 0;
        Constants.CulledAlphaMaskedDoubleSidedDrawCalls.count = 0;
    }

    memoryBarrierBuffer();
    barrier();

    Instance instance = Constants.Instances.instances[index];
    Mesh     mesh     = Constants.Meshes.meshes[instance.meshIndex];

    if (!IsVisible(mesh, instance))
    {
        return;
    }

    bool isDoubleSided = Material_IsDoubleSided(mesh.material);
    bool isAlphaMasked = Material_IsAlphaMasked(mesh.material);
    
    DrawCall drawCall = GenerateDrawCall(mesh.surfaceInfo);

    if (isDoubleSided && !isAlphaMasked)
    {
        uint drawIndex = atomicAdd(Constants.CulledOpaqueDoubleSidedDrawCalls.count, 1);

        Constants.CulledOpaqueDoubleSidedDrawCalls.drawCalls[drawIndex]     = drawCall;
        Constants.CulledOpaqueDoubleSidedInstanceIndices.indices[drawIndex] = index;
    }
    else if (isAlphaMasked && !isDoubleSided)
    {
        uint drawIndex = atomicAdd(Constants.CulledAlphaMaskedDrawCalls.count, 1);

        Constants.CulledAlphaMaskedDrawCalls.drawCalls[drawIndex]     = drawCall;
        Constants.CulledAlphaMaskedInstanceIndices.indices[drawIndex] = index;
    }
    else if (isDoubleSided && isAlphaMasked)
    {
        uint drawIndex = atomicAdd(Constants.CulledAlphaMaskedDoubleSidedDrawCalls.count, 1);

        Constants.CulledAlphaMaskedDoubleSidedDrawCalls.drawCalls[drawIndex]     = drawCall;
        Constants.CulledAlphaMaskedDoubleSidedInstanceIndices.indices[drawIndex] = index;
    }
    else
    {
        uint drawIndex = atomicAdd(Constants.CulledOpaqueDrawCalls.count, 1);

        Constants.CulledOpaqueDrawCalls.drawCalls[drawIndex]     = drawCall;
        Constants.CulledOpaqueInstanceIndices.indices[drawIndex] = index;
    }
}

bool IsVisible(Mesh mesh, Instance instance)
{
    AABB    aabb    = AABB_Transform(mesh.aabb, instance.transform);
    vec3[8] corners = AABB_GetCorners(aabb);

    for (uint i = 0; i < 6; ++i)
    {
        Plane plane = Constants.Frustum.planes[i];

        uint outside = 0;

        for (uint j = 0; j < 8; ++j)
        {
            if ((dot(plane.normal, corners[j]) + plane.distance) < 0.0f)
            {
                ++outside;
            }
        }

        if (outside == 8)
        {
            return false;
        }
    }

    return true;
}